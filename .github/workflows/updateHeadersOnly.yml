
name: Rerun header update in satisfactory-modding

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The game branch (EarlyAccess/Experimental)'
        required: true
        type: string

jobs:
  check:
    runs-on: self-hosted
    outputs:
     isLatest: ${{ steps.setIsLatest.outputs.isLatest }}
     gameVersion: ${{ steps.setGameVersion.outputs.gameVersion }}
    steps:
      - name: Validate branch name
        if: github.event.inputs.branch != 'EarlyAccess' && github.event.inputs.branch != 'Experimental'
        run: |
          echo "Invalid branch ${{ github.event.inputs.branch }}"
          exit 1
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
      
      - name: Download legendary
        run: gh release download --repo derrod/legendary -p "legendary.exe"
      
      - name: Download Satisfactory EarlyAccess version file
        if: github.event.inputs.branch == 'EarlyAccess'
        run: .\legendary.exe download CrabEA --base-path "$Env:GITHUB_WORKSPACE" --prefix="Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version" --game-folder="Satisfactory" -y
      
      - name: Download Satisfactory Experimental version file
        if: github.event.inputs.branch == 'Experimental'
        run: .\legendary.exe download CrabTest --base-path "$Env:GITHUB_WORKSPACE" --prefix="Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version" --game-folder="Satisfactory" -y

      - name: Read Satisfactory version
        id: gameVersion
        uses: notiz-dev/github-action-json-property@release
        with: 
            path: 'Satisfactory/Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version'
            prop_path: 'Changelist'

      - uses: actions/checkout@v2
        with:
          ref: 'refs/heads/${{ github.event.inputs.branch }}'
          path: 'satisfactory-modding'
          repository: 'mircearoata/satisfactory-modding'

      - name: Read current repo version
        id: currentVersion
        uses: juliangruber/read-file-action@v1
        with:
          path: 'satisfactory-modding/Headers/currentVersion.txt'
      
      - name: Set gameVersion
        id: setGameVersion
        run: echo "::set-output name=gameVersion::${{ steps.gameVersion.outputs.prop }}"
      
      - name: Set isLatest
        id: setIsLatest
        run: echo "::set-output name=isLatest::${{ steps.gameVersion.outputs.prop == steps.currentVersion.outputs.content }}"
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
     
  updateHeaders:
    runs-on: self-hosted
    needs: check
    if: ${{ needs.check.outputs.isLatest }} == true
    steps:
      - name: Validate branch name
        if: github.event.inputs.branch != 'EarlyAccess' && github.event.inputs.branch != 'Experimental'
        run: |
          echo "Invalid branch ${{ github.event.inputs.branch }}"
          exit 1
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
      
      - name: Download legendary
        run: gh release download --repo derrod/legendary -p "legendary.exe"
      
      - name: Download jq
        run: gh release download --repo stedolan/jq -p "jq-win64.exe"
      
      - name: Download Satisfactory EarlyAccess
        if: github.event.inputs.branch == 'EarlyAccess'
        run: .\legendary.exe download CrabEA --base-path "$Env:GITHUB_WORKSPACE" --game-folder="Satisfactory" -y
      
      - name: Download Satisfactory Experimental
        if: github.event.inputs.branch == 'Experimental'
        run: .\legendary.exe download CrabTest --base-path "$Env:GITHUB_WORKSPACE" --game-folder="Satisfactory" -y

      - name: Checkout satisfactory-modding
        uses: actions/checkout@v2
        with:
          ref: 'refs/heads/${{ github.event.inputs.branch }}'
          path: 'satisfactory-modding'
          repository: 'mircearoata/satisfactory-modding'
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3
      
      - name: Create Unreal Engine directory
        run: mkdir ue4
        
      - name: Setup Unreal Engine
        working-directory: ue4
        run: |
          gh release download --repo SatisfactoryModdingUE/UnrealEngine -p "UnrealEngine-CSS-Editor-Win64.7z.*"
          7z x UnrealEngine-CSS-Editor-Win64.7z.001
          rm UnrealEngine-CSS-Editor-Win64.7z*
          mv lb\\win\\Engine Engine
          reg save "HKCU\Software\Epic Games\Unreal Engine\Builds" UEBuilds.hiv
          .\\SetupScripts\\Register.bat
        
      - name: Create Plugins directory
        run: mkdir satisfactory-modding/FactoryGame/Plugins
        
      - name: Add Wwise
        working-directory: satisfactory-modding/FactoryGame/Plugins
        run: |
          Invoke-WebRequest -Uri "${{ secrets.WWISE_URL }}" -OutFile "Wwise.7z"
          7z x Wwise.7z
          rm Wwise.7z
          
      - name: Checkout UEAssetToolkit
        uses: actions/checkout@v2
        with:
          ref: 'refs/heads/native-class-dumper'
          path: 'UEAssetToolkit'
          repository: 'mircearoata/UEAssetToolkit'
          
      - name: Copy AssetDumper to project
        run: cp UEAssetToolkit\\AssetDumper satisfactory-modding\\FactoryGame\\Plugins -Recurse
      
      - name: Compile project
        run: |
          .\\ue4\\Engine\\Binaries\\DotNET\\UnrealBuildTool.exe  -projectfiles -project="$Env:GITHUB_WORKSPACE\\satisfactory-modding\\FactoryGame\\FactoryGame.uproject" -game -rocket -progres
          MSBuild.exe .\\satisfactory-modding\\FactoryGame\\FactoryGame.sln /p:Configuration="Shipping" /p:Platform="Win64" /t:"Games\FactoryGame"
          MSBuild.exe .\\satisfactory-modding\\FactoryGame\\FactoryGame.sln /p:Configuration="Development Editor" /p:Platform="Win64" /t:"Games\FactoryGame"
          
      - name: Set AssetDumper BuildId
        run: |
          .\jq-win64.exe -r '.BuildId = ""SML""' satisfactory-modding\\FactoryGame\\Plugins\\AssetDumper\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules > FactoryGame-Win64-Shipping.modules
          rm satisfactory-modding\\FactoryGame\\Plugins\\AssetDumper\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules
          mv FactoryGame-Win64-Shipping.modules satisfactory-modding\\FactoryGame\\Plugins\\AssetDumper\\Binaries\\Win64
          
      - name: Copy AssetDumper to game
        run: cp satisfactory-modding\\FactoryGame\\Plugins\\AssetDumper Satisfactory\\FactoryGame\\Mods -Recurse
          
      - name: Run game and dump native classes
        run: Start-Process .\\Satisfactory\\Engine\\Binaries\\Win64\\FactoryGame-Win64-Shipping.exe -ArgumentList "-EpicPortal -nullrhi -DumpNativeClasses" -Wait
          
      - name: Extract headers
        working-directory: Satisfactory/CommunityResources
        run: 7z x Headers.zip -oHeaders
      
      - name: Compile tools
        working-directory: satisfactory-modding/GenerationScripts
        run: |
          MSBuild.exe FixHeaders\\FixHeaders.sln
          MSBuild.exe ImplementHeaders\\ImplementHeaders.sln
          
      - name: Update headers and dummy implementations
        run: py satisfactory-modding\\GenerationScripts\\generateCode.py --headers "Satisfactory\\CommunityResources\\Headers" --version "${{ needs.check.outputs.gameVersion }}" --uepath="ue4"
        
      - name: Run defaults generator
        run: py satisfactory-modding\\GenerationScripts\\defaultValues.py --dump "Satisfactory\\FactoryGame\\NativeClassDump"
      
      - name: Compile updated project
        run: |
          MSBuild.exe .\\satisfactory-modding\\FactoryGame\\FactoryGame.sln /p:Configuration="Shipping" /p:Platform="Win64" /t:"Games\FactoryGame"
          MSBuild.exe .\\satisfactory-modding\\FactoryGame\\FactoryGame.sln /p:Configuration="Development Editor" /p:Platform="Win64" /t:"Games\FactoryGame"
      
      - name: Commit and push
        working-directory: satisfactory-modding
        run: |
          git rm -r --cached *
          git add .
          git commit -m "Rerun update on CL${{ needs.check.outputs.gameVersion }}"
          git push
          
      - name: Restore registry
        if: always()
        working-directory: ue4
        run: reg restore "HKCU\Software\Epic Games\Unreal Engine\Builds" UEBuilds.hiv
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
